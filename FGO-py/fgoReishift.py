import cv2,numpy
import fgoDevice
from fgoDetect import Detect
from fgoLogging import getLogger
from fgoSchedule import schedule
logger=getLogger('Reishift')

class List:
    def __init__(self,name):self.name=name
    def __call__(self):
        while not Detect(0,1).isMainInterface():pass
        while not Detect(.4).isQuestListBegin():fgoDevice.device.swipe((1000,200),(1000,600))
        while not((p:=Detect(.4).findChapter(self.name))and(fgoDevice.device.touch(p),True)[1]):fgoDevice.device.swipe((1000,600),(1000,200))
class Map:
    poly=numpy.array([(230,40),(230,200),(40,200),(40,450),(150,450),(220,520),(630,520),(630,680),(980,680),(980,570),(1240,570),(1240,40)])
    def __init__(self,name,coord):
        self.name=name
        self.coord=numpy.asarray(coord)
    def __call__(self):
        while not Detect(1).isMainInterface():pass
        schedule.sleep(1)
        fgoDevice.device.press('\xBF')
        while cv2.pointPolygonTest(self.poly,p:=(640,360)+(v:=self.coord-Detect(1).findMapCamera(self.name[:-1])),False)<=0:(lambda v:fgoDevice.device.swipe((640,360)+v,(640,360)-v))(v*min(590/abs(v[0]),310/abs(v[1]),.5))
        fgoDevice.device.perform('  ',(300,300))
        fgoDevice.device.touch(p)
class Mictlan:
    elevator=[(1215,560-54*i)for i in range(9)]
    def __init__(self,name,floor,coord):
        self.name=name
        self.floor=floor
        self.coord=coord
    def __call__(self):
        while not Detect(1).isMainInterface():pass
        schedule.sleep(1.6)
        fgoDevice.device.touch(self.elevator[[1,2,3,4,5,6,7,8,7][self.floor]],2000)
        fgoDevice.device.touch(self.elevator[self.floor],2000)
        fgoDevice.device.touch(self.coord)
class OrdaelCall:
    landmark=[(1142,230),(1142,175),(1142,120)]
    def __init__(self,name,landmark,coord=None,move=(0,0,0,0)):
        self.name=name
        self.landmark=self.landmark[landmark]
        self.coord=coord
        self.move=move
    def __call__(self):
        while not Detect(1).isMainInterface():pass
        schedule.sleep(1)
        fgoDevice.device.touch(self.landmark,1600)
        if self.coord:
            fgoDevice.device.perform('\x67'+''.join(i*j for i,j in zip('\x25\x26\x27\x28',self.move)),(1000,)+(2000,)*sum(self.move))
            fgoDevice.device.touch(self.coord)

place={i.name:i for i in(
List((0,)),List((1,)),List((2,)),List((4,)),List((5,)),
List((0,0)),
List((1,0)),List((1,1)),List((1,2)),List((1,3)),List((1,4)),List((1,5)),List((1,6)),List((1,7)),
List((2,0)),List((2,1)),List((2,2)),List((2,3)),
List((3,0)),List((3,1)),List((3,2)),List((3,3)),List((3,4)),List((3,5)),List((3,6)),List((3,7)),
List((4,0)),List((4,1)),
OrdaelCall((5,1),0,(1103,183)),
Map((1,0,0),(770,415)),Map((1,0,1),(898,910)),Map((1,0,2),(1397,635)),Map((1,0,3),(1483,318)),Map((1,0,4),(1941,869)),Map((1,0,5),(582,748)),Map((1,0,6),(374,1006)),Map((1,0,7),(382,552)),
Map((1,1,0),(1689,385)),Map((1,1,1),(1536,314)),Map((1,1,2),(1227,557)),Map((1,1,3),(1576,634)),Map((1,1,4),(1554,883)),Map((1,1,5),(1030,780)),Map((1,1,6),(864,424)),Map((1,1,7),(1030,212)),Map((1,1,8),(1754,1086)),Map((1,1,9),(504,933)),
Map((1,2,0),(1696,888)),Map((1,2,1),(1408,843)),Map((1,2,2),(1268,680)),Map((1,2,3),(1067,557)),Map((1,2,4),(793,676)),Map((1,2,5),(721,381)),Map((1,2,6),(941,923)),Map((1,2,7),(430,923)),Map((1,2,8),(1538,1121)),Map((1,2,9),(534,208)),Map((1,2,10),(1341,273)),
Map((1,3,0),(1301,1101)),Map((1,3,1),(1634,1054)),Map((1,3,2),(1958,747)),Map((1,3,3),(1523,311)),Map((1,3,4),(978,328)),Map((1,3,5),(586,211)),Map((1,3,6),(820,714)),Map((1,3,7),(290,911)),Map((1,3,8),(1944,277)),Map((1,3,9),(247,418)),Map((1,3,10),(798,1173)),
Map((1,4,0),(1858,247)),Map((1,4,1),(1990,546)),Map((1,4,2),(1504,593)),Map((1,4,3),(703,630)),Map((1,4,4),(680,1066)),Map((1,4,5),(660,268)),Map((1,4,6),(1387,274)),Map((1,4,7),(1553,1017)),Map((1,4,8),(201,766)),
Map((1,5,0),(960,380)),Map((1,5,1),(760,451)),Map((1,5,2),(910,633)),Map((1,5,3),(797,970)),Map((1,5,4),(1044,950)),Map((1,5,5),(1223,984)),Map((1,5,6),(1413,1046)),Map((1,5,7),(208,727)),Map((1,5,8),(1366,503)),Map((1,5,9),(1146,570)),Map((1,5,10),(1647,1014)),Map((1,5,11),(1883,874)),Map((1,5,12),(2031,658)),Map((1,5,13),(1623,540)),
Map((1,6,0),(733,988)),Map((1,6,1),(996,886)),Map((1,6,2),(1340,710)),Map((1,6,3),(1254,331)),Map((1,6,4),(1008,604)),Map((1,6,5),(1093,191)),Map((1,6,6),(763,326)),Map((1,6,7),(397,753)),Map((1,6,8),(414,498)),Map((1,6,9),(458,1070)),Map((1,6,10),(1724,776)),Map((1,6,11),(1591,891)),Map((1,6,12),(1740,980)),Map((1,6,13),(1740,474)),
Map((1,7,0),(652,653)),Map((1,7,1),(447,545)),Map((1,7,2),(263,456)),Map((1,7,3),(660,961)),Map((1,7,4),(1184,1030)),Map((1,7,5),(1334,1253)),Map((1,7,6),(1418,1456)),Map((1,7,7),(1675,1107)),Map((1,7,8),(1240,581)),Map((1,7,9),(1392,518)),Map((1,7,10),(989,608)),Map((1,7,11),(860,530)),Map((1,7,12),(1678,256)),Map((1,7,13),(400,239)),
Map((2,0,0),(430,1303)),Map((2,0,1),(695,1028)),Map((2,0,2),(1274,991)),Map((2,0,3),(1989,1169)),Map((2,0,4),(1787,715)),Map((2,0,5),(632,743)),Map((2,0,6),(314,966)),Map((2,0,7),(527,134)),Map((2,0,8),(2160,1386)),Map((2,0,9),(2209,1032)),
Map((2,1,0),(1384,1212)),Map((2,1,1),(1359,1398)),Map((2,1,2),(1234,1546)),Map((2,1,3),(1555,2039)),Map((2,1,4),(1868,1308)),Map((2,1,5),(1320,887)),Map((2,1,6),(1082,648)),Map((2,1,7),(753,1789)),Map((2,1,8),(970,1402)),Map((2,1,9),(2009,1608)),Map((2,1,10),(347,1281)),Map((2,1,11),(672,944)),
Map((2,2,0),(1146,791)),Map((2,2,1),(1075,549)),Map((2,2,2),(1369,443)),Map((2,2,3),(1746,1237)),Map((2,2,4),(1330,1355)),Map((2,2,5),(1895,1072)),Map((2,2,6),(1215,237)),Map((2,2,7),(397,742)),
Map((2,3,0),(880,1345)),Map((2,3,1),(544,1258)),Map((2,3,2),(1201,657)),Map((2,3,3),(1538,637)),Map((2,3,4),(2029,206)),Map((2,3,5),(769,257)),Map((2,3,6),(1767,385)),Map((2,3,7),(460,528)),Map((2,3,8),(1275,1342)),Map((2,3,9),(1018,962)),Map((2,3,10),(443,1023)),
Map((3,0,0),(254,1216)),Map((3,0,1),(414,947)),Map((3,0,2),(283,696)),Map((3,0,3),(610,435)),Map((3,0,4),(884,481)),Map((3,0,5),(1070,598)),Map((3,0,6),(946,769)),Map((3,0,7),(806,1041)),Map((3,0,8),(1646,1172)),Map((3,0,9),(1157,1295)),Map((3,0,10),(1014,299)),Map((3,0,11),(1643,549)),Map((3,0,12),(1643,367)),Map((3,0,13),(2052,1064)),
Map((3,1,0),(1944,1329)),Map((3,1,1),(1627,1355)),Map((3,1,2),(1749,995)),Map((3,1,3),(1389,1161)),Map((3,1,4),(1283,909)),Map((3,1,5),(898,964)),Map((3,1,6),(484,889)),Map((3,1,7),(535,252)),Map((3,1,8),(932,1252)),Map((3,1,9),(1490,556)),Map((3,1,10),(829,529)),
Map((3,2,0),(1572,1086)),Map((3,2,1),(1386,1284)),Map((3,2,2),(1114,1229)),Map((3,2,3),(1838,1135)),Map((3,2,4),(1452,929)),Map((3,2,5),(1280,795)),Map((3,2,6),(863,1079)),Map((3,2,7),(589,913)),Map((3,2,8),(564,649)),Map((3,2,9),(847,336)),Map((3,2,10),(1632,552)),
Map((3,3,0),(749,472)),Map((3,3,1),(1070,759)),Map((3,3,2),(1320,686)),Map((3,3,3),(1424,332)),Map((3,3,4),(752,775)),Map((3,3,5),(1192,964)),Map((3,3,6),(489,1204)),Map((3,3,7),(1187,1332)),Map((3,3,8),(2020,842)),Map((3,3,9),(1677,689)),
Map((3,4,0),(2123,936)),Map((3,4,1),(1827,844)),Map((3,4,2),(1500,396)),Map((3,4,3),(895,286)),Map((3,4,4),(658,492)),Map((3,4,5),(394,430)),Map((3,4,6),(643,1282)),Map((3,4,7),(1203,1050)),Map((3,4,8),(809,822)),
Map((3,5,0),(412,830)),Map((3,5,1),(786,961)),Map((3,5,2),(1052,1158)),Map((3,5,3),(1724,1132)),Map((3,5,4),(1204,1084)),Map((3,5,5),(1204,1215)),Map((3,5,6),(1206,1352)),Map((3,5,7),(1204,806)),Map((3,5,8),(1206,622)),Map((3,5,9),(1207,450)),Map((3,5,10),(2024,982)),
Map((4,0,0),(492,966)),Map((4,0,1),(817,970)),Map((4,0,2),(1083,904)),Map((4,0,3),(1884,341)),Map((4,0,4),(1200,496)),Map((4,0,5),(1198,350)),Map((4,0,6),(1201,698)),Map((4,0,7),(1470,1142)),Map((4,0,8),(1395,552)),Map((4,0,9),(1435,341)),Map((4,0,10),(2087,789)),Map((4,0,11),(447,242)),Map((4,0,12),(740,556)),
Map((3,6,0),(444,1341)),Map((3,6,1),(684,1342)),Map((3,6,2),(1341,1104)),Map((3,6,3),(1149,866)),Map((3,6,4),(1770,962)),Map((3,6,5),(2120,919)),Map((3,6,6),(1409,787)),Map((3,6,7),(1883,1139)),Map((3,6,8),(1095,649)),Map((3,6,9),(1043,361)),Map((3,6,10),(1055,246)),Map((3,6,11),(1197,172)),Map((3,6,12),(1234,318)),Map((3,6,13),(1757,775)),Map((3,6,14),(1540,1002)),Map((3,6,15),(2234,1184)),
Map((4,1,0),(1474,864)),Map((4,1,1),(1760,762)),Map((4,1,2),(1226,1033)),Map((4,1,3),(778,702)),Map((4,1,4),(886,1198)),Map((4,1,5),(374,1227)),Map((4,1,6),(894,919)),Map((4,1,7),(1375,678)),Map((4,1,8),(1683,1198)),Map((4,1,9),(1272,1289)),Map((4,1,10),(2086,1307)),Map((4,1,11),(1178,433)),Map((4,1,12),(1192,272)),Map((4,1,13),(1170,815)),Map((4,1,14),(197,949)),Map((4,1,15),(581,301)),
Mictlan((3,7,0),0,(822,507)),Mictlan((3,7,1),0,(743,375)),Mictlan((3,7,2),1,(665,494)),
Mictlan((3,7,3),1,(566,356)),
Mictlan((3,7,10),2,(923,376)),Mictlan((3,7,5),2,(638,360)),Mictlan((3,7,4),2,(572,293)),
Mictlan((3,7,6),3,(517,461)),Mictlan((3,7,7),3,(638,350)),
Mictlan((3,7,8),4,(823,360)),Mictlan((3,7,9),4,(494,302)),
Mictlan((3,7,11),5,(638,323)),
Mictlan((3,7,15),6,(896,371)),Mictlan((3,7,12),7,(638,460)),
Mictlan((3,7,13),7,(638,342)),
Mictlan((3,7,14),8,(638,360)),
OrdaelCall((5,0,0),1,(652,188)),OrdaelCall((5,0,1),1,(596,222)),OrdaelCall((5,0,2),2,(918,342)),OrdaelCall((5,0,3),0,(378,264)),OrdaelCall((5,0,4),2,(732,620)),
OrdaelCall((5,0,5),1,(566,165)),OrdaelCall((5,0,6),0,(437,473)),
OrdaelCall((5,0,7),1,(905,238)),OrdaelCall((5,0,8),0,(401,338)),OrdaelCall((5,0,9),1,(604,640)),OrdaelCall((5,0,10),1,(873,357)),
OrdaelCall((5,0,11),0),OrdaelCall((5,0,12),0,(475,332)),OrdaelCall((5,0,13),1,(670,627),(0,1,0,0)),OrdaelCall((5,0,14),0,(838,467)),
Map((5,1,0),(805,1684)),Map((5,1,1),(1222,1723)),Map((5,1,2),(1197,1321)),Map((5,1,3),(980,1046)),Map((5,1,4),(1010,1238)),Map((5,1,5),(1391,1055)),Map((5,1,6),(824,930)),Map((5,1,7),(1830,1355)),Map((5,1,8),(1654,1176)),Map((5,1,9),(562,1373)),Map((5,1,10),(793,1121)),
)}
def reishift(quest):
    for i in range(1,len(quest)):
        logger.info(f'Goto {quest[:i]}')
        place.get(quest[:i],lambda:None)()
